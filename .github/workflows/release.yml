name: Create Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      # –ß–µ–∫-–∞—É—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          clean: true

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          check-latest: false

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–±–æ—Ä–∫–∏ VideoBot.exe
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install cx-Freeze==8.0.0 PySide6==6.8.0
        shell: cmd

      # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ 7-Zip
      - name: Install 7-Zip
        run: |
          choco install 7zip -y
        shell: cmd

      # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      - name: Create manifest file
        run: |
          echo ^<?xml version="1.0" encoding="UTF-8" standalone="yes"?^> > VideoBot.exe.manifest
          echo ^<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0"^> >> VideoBot.exe.manifest
          echo ^    ^<trustInfo xmlns="urn:schemas-microsoft-com:asm.v3"^> >> VideoBot.exe.manifest
          echo ^        ^<security^> >> VideoBot.exe.manifest
          echo ^            ^<requestedPrivileges^> >> VideoBot.exe.manifest
          echo ^                ^<requestedExecutionLevel level="requireAdministrator" uiAccess="false"/^> >> VideoBot.exe.manifest
          echo ^            ^</requestedPrivileges^> >> VideoBot.exe.manifest
          echo ^        ^</security^> >> VideoBot.exe.manifest
          echo ^    ^</trustInfo^> >> VideoBot.exe.manifest
          echo ^</assembly^> >> VideoBot.exe.manifest
          type VideoBot.exe.manifest
        shell: cmd

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ JSON —Ñ–∞–π–ª–æ–≤
      - name: Ensure JSON files are in UTF-8
        run: |
          echo import json > ensure_utf8.py
          echo import sys >> ensure_utf8.py
          echo files = ['version.json', 'help_content.json'] >> ensure_utf8.py
          echo for file in files: >> ensure_utf8.py
          echo     try: >> ensure_utf8.py
          echo         with open(file, 'r', encoding='utf-8') as f: json.load(f) >> ensure_utf8.py
          echo     except UnicodeDecodeError: >> ensure_utf8.py
          echo         with open(file, 'r', encoding='cp1251') as f: content = f.read() >> ensure_utf8.py
          echo         with open(file, 'w', encoding='utf-8') as f: f.write(content) >> ensure_utf8.py
          python ensure_utf8.py
        shell: cmd

      # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö—ç—à–∞ VideoBot.py –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
      - name: Log SHA256 hash of VideoBot.py
        run: |
          certutil -hashfile VideoBot.py SHA256 > videobot_py_hash.txt
          type videobot_py_hash.txt
        shell: cmd

      # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏ changelog
      - name: Get version and changelog from version.json
        id: version
        env:
          PYTHONUTF8: 1
        run: |
          python get_version.py
        shell: cmd

      # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
      - name: Clean dist directory
        run: |
          if exist "dist" rmdir /s /q "dist"
          mkdir "dist"
        shell: cmd

      # –°–±–æ—Ä–∫–∞ VideoBot.exe
      - name: Build VideoBot
        run: |
          REM –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Å–±–æ—Ä–∫–æ–π
          python setup.py clean > clean_videobot.log 2>&1 || (type clean_videobot.log && exit 1)
          REM –°–±–æ—Ä–∫–∞
          python setup.py build_exe > build_videobot.log 2>&1 || (type build_videobot.log && exit 1)
          if not exist "VideoBot\VideoBot.exe" (
            echo "Error: VideoBot.exe was not created during the build"
            type build_videobot.log
            exit 1
          )
          certutil -hashfile VideoBot\VideoBot.exe SHA256 > videobot_exe_hash.txt
          type videobot_exe_hash.txt
          REM –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ byedpi
          dir VideoBot\VideoBot.exe
          dir VideoBot
          REM –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ byedpi
          if exist "VideoBot\byedpi" (
            dir VideoBot\byedpi
            if exist "VideoBot\byedpi\ciadpi.exe" (
              echo "byedpi\ciadpi.exe found in build directory"
              dir VideoBot\byedpi\ciadpi.exe
            ) else (
              echo "Error: byedpi\ciadpi.exe not found in VideoBot\byedpi"
              exit 1
            )
          ) else (
            echo "Error: byedpi directory not found in VideoBot"
            exit 1
          )
          REM –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø–∞–ø–∫—É VideoBot –∏ –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–µ–∑ —Å–∞–º–æ–π –ø–∞–ø–∫–∏
          cd VideoBot
          7z a -tzip ..\dist\VideoBot_v${{ steps.version.outputs.VERSION }}.zip *
          cd ..
          REM –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∞—Ä—Ö–∏–≤–∞
          7z l dist\VideoBot_v${{ steps.version.outputs.VERSION }}.zip
        shell: cmd

      # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö—ç—à–∞ –¥–ª—è —Ä–µ–ª–∏–∑–∞
      - name: Generate SHA256 for Release
        run: |
          certutil -hashfile dist\VideoBot_v${{ steps.version.outputs.VERSION }}.zip SHA256 > dist\VideoBot_v${{ steps.version.outputs.VERSION }}.zip.sha256
        shell: cmd

      # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–µ–≥–∞
      - name: Check if tag exists
        id: check_tag
        run: |
          git fetch --tags
          $tag_exists = git tag -l "v${{ steps.version.outputs.VERSION }}"
          Write-Host "Tag v${{ steps.version.outputs.VERSION }} exists: $tag_exists"
          if ($tag_exists) {
            echo "result=true" >> $env:GITHUB_OUTPUT
          } else {
            echo "result=false" >> $env:GITHUB_OUTPUT
          }
        shell: powershell

      # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
      - name: Create Release and Upload Assets
        if: steps.check_tag.outputs.result == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: Release v${{ steps.version.outputs.VERSION }}
          body: |
            **Version ${{ steps.version.outputs.VERSION }}** üöÄ
            **Changelog:** üìù
            ${{ steps.version.outputs.CHANGELOG }}
            **Downloads:**
            - **Release**: `VideoBot_v${{ steps.version.outputs.VERSION }}.zip`
            **Requirements:**
            - Python 3.10: The program will help install it automatically.
            - FFmpeg: The program will install it via `winget install ffmpeg`.
            **Note:** Extract the ZIP into a clean VideoBot folder to install or update.
          files: |
            dist/VideoBot_v${{ steps.version.outputs.VERSION }}.zip
            dist/VideoBot_v${{ steps.version.outputs.VERSION }}.zip.sha256
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}